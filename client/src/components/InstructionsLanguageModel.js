import React from 'react';
import {getRndInteger} from '../utils/utilityFunctions';

class InstructionsLM extends React.Component {
    constructor(props) {
        super(props); 

        this._fetchQuoteAndDisplay = this._fetchQuoteAndDisplay.bind(this); 
    }
    
    componentDidMount() {
        this._fetchQuoteAndDisplay(); 
    }

    async _fetchQuoteAndDisplay() {
        const quoteBox = document.getElementById("quoteBox");
        try {
            this._cleanUpInnerHTML();
            // add a spinning element to the div to indicate we are waiting on a response from an api
            // that will either succeed or fail, at which point spinnerDiv is removed 
            quoteBox.insertBefore(this.props._addSpinnerAsync(), quoteBox.firstChild); 
            const fetchedQuotesRaw = await fetch('https://type.fit/api/quotes');
            quoteBox.removeChild(quoteBox.children[0]);
            const fetchedQuotesJSON = await fetchedQuotesRaw.json(); 
            const randomIdx = getRndInteger(0, 1643); 
            const randomQuote = fetchedQuotesJSON[randomIdx]; 
            this._addQuoteInfo(randomQuote); 
        }

        catch(err) {
            quoteBox.removeChild(quoteBox.children[0]);
            console.log(err);
            document.getElementById("quoteDisplay").innerHTML = "Sorry, there was an error fetching your quote :(";
        }
    }

    _cleanUpInnerHTML() {
        document.getElementById("quoteDisplay").innerHTML = null; 
        document.getElementById("authorDisplay").innerHTML = null; 
    }

    _addQuoteInfo(randomQuote) {
        const [quotePNode, authorPNode] = this._makeQuoteAuthorDisplay(randomQuote); 
        document.getElementById("quoteDisplay").appendChild(quotePNode); 
        document.getElementById("authorDisplay").appendChild(authorPNode);

    }

    _makeQuoteAuthorDisplay(randomQuote) {
        const authorPNode = document.createElement('p'); 
        const quotePNode = document.createElement('p'); 

        quotePNode.innerHTML = randomQuote.text; 
        authorPNode.innerHTML = "-"+(randomQuote.author ? randomQuote.author: "Unknown");
        return [quotePNode, authorPNode]; 
    }

    render() {
        return(
            <div className = "ML_Model_Instructions">
                <div id = "instructionsLM">
                    <p>
                        There are no special instructions for generating new pok√©mon names, just click on the
                        button below and a new name will be generated by an AI algorithm!
                    </p>
                    <p>
                        While generating names, enjoy the inspirational quotes below :) 
                    </p>
                </div>
                <div id = "quoteBox">
                    <div id = "quoteDisplay"></div>
                    <div id = "authorDisplay"></div>
                    <div id = "newQuote" className = "buttonSubmitModel" onClick = {this._fetchQuoteAndDisplay}>Get New Quote</div>
                </div>
            </div>
        );
    }
}

export default InstructionsLM; 